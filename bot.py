import logging
import os
import json
from datetime import datetime
from flask import Flask, request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------------------
TOKEN = os.getenv("BOT_TOKEN", "8321988283:AAGjmdxmOoOixeYFLNUUtZ1XfknOuGklX1U")
SPREADSHEET_ID = "1lJc616p6Mx0QBAXexmBJxYX9cte8cSBANJQNaR2V12w"
ADMIN_CHAT_ID = 460841825
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è Render

# ---------------------- –õ–æ–≥—É–≤–∞–Ω–Ω—è -------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ---------------------- Google Sheets ---------------------
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
credentials_info = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_info, scope)
gc = gspread.authorize(credentials)
SPREADSHEET = gc.open_by_key(SPREADSHEET_ID)

SHEET_PRAYER = SPREADSHEET.sheet1
try:
    SHEET_OTHERS = SPREADSHEET.get_worksheet(1)
except Exception:
    SHEET_OTHERS = SPREADSHEET.add_worksheet(title="–ú–æ–ª–∏—Ç–≤–∞ –∑–∞ —ñ–Ω—à–∏—Ö", rows="100", cols="10")
    SHEET_OTHERS.append_row(["–î–∞—Ç–∞", "–Ü–º'—è", "–ú–æ–ª–∏—Ç–≤–∞", "–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å", "–¢–µ–ª–µ—Ñ–æ–Ω"])
try:
    SHEET_KVL = SPREADSHEET.get_worksheet(2)
except Exception:
    SHEET_KVL = SPREADSHEET.add_worksheet(title="–ö–í–õ", rows="100", cols="5")
    SHEET_KVL.append_row(["–î–∞—Ç–∞ —ñ —á–∞—Å", "–Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ", "–ú—ñ—Å—Ç–æ", "–û–±–ª–∞—Å—Ç—å", "–¢–µ–ª–µ—Ñ–æ–Ω"])

# ---------------------- –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ----------------
def main_keyboard():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üôè –ó–∞–ª–∏—à–∏—Ç–∏ –Ω–∞–º—ñ—Ä–µ–Ω–Ω—è", callback_data="pray_request")],
            [InlineKeyboardButton("‚úùÔ∏è –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –º–æ–ª–∏—Ç–≤–∏", callback_data="pray_for_others")],
            [InlineKeyboardButton("üõ°Ô∏è –ë—ñ–ª—å—à–µ –ø—Ä–æ –ö—Ä—É—Ü—ñ—è—Ç—É –í–∏–∑–≤–æ–ª–µ–Ω–Ω—è –õ—é–¥–∏–Ω–∏", callback_data="crusade")],
        ]
    )

# ---------------------- –û–±—Ä–æ–±–Ω–∏–∫–∏ --------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ª–∞–≤–∞ –Ü—Å—É—Å—É –•—Ä–∏—Å—Ç—É!\n\n"
        "–¶–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –º–æ–ª–∏—Ç–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏ –ö—Ä—É—Ü—ñ—è—Ç–∏ –í–∏–∑–≤–æ–ª–µ–Ω–Ω—è –õ—é–¥–∏–Ω–∏ üî•–°–º–æ–ª–æ—Å–∫–∏–ø–∏ –ì–µ–¥–µ–æ–Ω–∞üî•\n\n"
        "–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üôè –ó–∞–ª–∏—à–∏—Ç–∏ –Ω–∞–º—ñ—Ä–µ–Ω–Ω—è –∑–∞ –ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø –õ–Æ–î–ò–ù–ò –Ü–ó –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü\n"
        "‚úùÔ∏è –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –º–æ–ª–∏—Ç–≤–∏ –∑–∞ –∑–∞–ª–µ–∂–Ω–∏—Ö –æ—Å—ñ–±\n"
        "üõ°Ô∏è –î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –ø—Ä–æ –ö—Ä—É—Ü—ñ—è—Ç—É –í–∏–∑–≤–æ–ª–µ–Ω–Ω—è –õ—é–¥–∏–Ω–∏\n\n"
        "–¢–æ–∂, —Ä–æ–∑–ø–æ—á–Ω—ñ–º–æ!",
        reply_markup=main_keyboard(),
    )

async def periodicity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mapping = {"daily": "–©–æ–¥–Ω—è", "weekly": "–©–æ—Ç–∏–∂–Ω—è", "monthly": "–©–æ–º—ñ—Å—è—Ü—è"}
    context.user_data["periodicity"] = mapping.get(query.data, query.data)
    context.user_data["step_others"] = 4
    await query.message.reply_text("–î—è–∫—É—î–º–æ! üôè\n–ó–∞–ª–∏—à—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å ¬´‚Äì¬ª:")

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "pray_request":
        context.user_data.clear()
        context.user_data["step"] = 1
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –ª—é–¥–∏–Ω–∏, –∑–∞ —è–∫—É –ø—Ä–æ—Å–∏—Ç–µ –º–æ–ª–∏—Ç–≤—É:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]))
    elif data == "pray_for_others":
        context.user_data.clear()
        context.user_data["step_others"] = 1
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è üôè", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]))
    elif data == "back":
        context.user_data.clear()
        await query.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if context.user_data.get("step") == 1:
        SHEET_PRAYER.append_row([timestamp, text])
        await update.message.reply_text("–î—è–∫—É—î–º–æ! üôè –ù–∞–º—ñ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.", reply_markup=main_keyboard())
        context.user_data.clear()
        return

    step_others = context.user_data.get("step_others")
    if step_others:
        if step_others == 1:
            context.user_data["name"] = text
            context.user_data["step_others"] = 2
            await update.message.reply_text("–Ø–∫—É –º–æ–ª–∏—Ç–≤—É –±–∞–∂–∞—î—Ç–µ –º–æ–ª–∏—Ç–∏—Å—è?")
            return
        if step_others == 2:
            context.user_data["prayer"] = text
            context.user_data["step_others"] = 3
            await update.message.reply_text(
                "–Ø–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—Ç–µ –º–æ–ª–∏—Ç–∏—Å—è?", 
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–©–æ–¥–Ω—è", callback_data="daily")],
                    [InlineKeyboardButton("–©–æ—Ç–∏–∂–Ω—è", callback_data="weekly")],
                    [InlineKeyboardButton("–©–æ–º—ñ—Å—è—Ü—è", callback_data="monthly")]
                ])
            )
            return
        if step_others == 4:
            phone = text if text else "-"
            SHEET_OTHERS.append_row([
                timestamp,
                context.user_data.get("name", "-"),
                context.user_data.get("prayer", "-"),
                context.user_data.get("periodicity", "-"),
                phone
            ])
            await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –º–æ–ª–∏—Ç–≤—ñ üôè", reply_markup=main_keyboard())
            context.user_data.clear()
            return

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_keyboard())

# ---------------------- Flask + Webhook -------------------
app = Flask(__name__)

async def setup_webhook(application: Application):
    await application.bot.set_webhook(f"{WEBHOOK_URL}/webhook")

@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "OK", 200

@app.route("/")
def home():
    return "‚úÖ Bot is running!", 200

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(periodicity_handler, pattern="^(daily|weekly|monthly)$"))
    application.add_handler(CallbackQueryHandler(menu_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(setup_webhook(application))

    # Flask –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ Render (–ø–æ—Ä—Ç 10000 –∞–±–æ –∑–º—ñ–Ω–Ω–∏–π)
    port = int(os.getenv("PORT", 10000))
    from threading import Thread
    Thread(target=lambda: app.run(host="0.0.0.0", port=port)).start()

    application.run_polling(stop_signals=None)
